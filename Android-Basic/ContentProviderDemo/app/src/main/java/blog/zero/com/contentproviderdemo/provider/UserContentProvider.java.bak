package blog.zero.com.contentproviderdemo.provider;

import android.content.ContentProvider;
import android.content.ContentValues;
import android.content.Context;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;
import android.util.Log;

import blog.zero.com.contentproviderdemo.Consts;
import blog.zero.com.contentproviderdemo.builder.SelectionBuilder;

public class UserContentProvider extends ContentProvider {

    private static final String TAG = "UserContentProvider";
    private static final String DBNAME = "userdb";
    static final boolean DEBUG = Consts.DEBUG;
    //授权
    private static final String AUTHORITY = "blog.zero.com.contentproviderdemo.provider";
    private static final int USER_DIR = 0;
    private static final int USER_ITEM = 1;


    private static UriMatcher matcher;
    private UserDatabase userDatabase;

    //定义Uri
    static {
        matcher = new UriMatcher(UriMatcher.NO_MATCH);
        matcher.addURI(AUTHORITY, "user", USER_DIR);
        matcher.addURI(AUTHORITY, "user/#", USER_ITEM);
    }

    //六个抽象方法
    @Override
    public boolean onCreate(){
        userDatabase = new UserDatabase(getContext());
        return true;
    }

    @Override
    public Uri insert(Uri uri, ContentValues values){
        final SQLiteDatabase database = userDatabase.getWritableDatabase();
        Uri result;
        switch(matcher.match(uri)){
            case USER_DIR:
                long id = database.insert("user", null, values);
                result = Uri.parse(AUTHORITY + "/user/" + id);
                break;
            case USER_ITEM:
                throw new UnsupportedOperationException("Insert not support on URI: " + uri);
            default:
                throw new UnsupportedOperationException("Unknow URI: " + uri);

        }
        Context ctx = getContext();
        assert ctx != null;
        ctx.getContentResolver().notifyChange(uri, null, false);
        return result;
    }

    @Override
    public int delete(Uri uri, String selection, String[] selectionArgs){
        SelectionBuilder builder = new SelectionBuilder();
        int result = 0;
        final SQLiteDatabase database = userDatabase.getWritableDatabase();
        switch (matcher.match(uri)){
            case USER_DIR:
                result = builder.table("user")
                .where(selection, selectionArgs)
                .delete(database);
                break;
            case USER_ITEM:
                String id = uri.getLastPathSegment();
                result = builder.table("user")
                .where("_ID = ?", id)
                .where(selection, selectionArgs)
                .delete(database);
        }
        if(builder != null){
            builder.printSQL();
        }
        return result;
    }

    @Override
    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs){
        if(values == null){
            Log.e(TAG, "参数 插入的值不能为空");
            return -1;
        }
        if(DEBUG){
            Log.d(TAG, "uri: " + uri.toString());
        }
        SQLiteDatabase database = userDatabase.getWritableDatabase();
        SelectionBuilder builder = new SelectionBuilder();
        int result = 0;
        switch(matcher.match(uri)){
            case USER_DIR:
                result = builder.table("user")
                        .where(selection, selectionArgs)
                        .update(database, values);
                break;
            case USER_ITEM:
                String id = uri.getLastPathSegment();
                result = builder.table("user")
                        .where("_ID=?", id)
                        .where(selection, selectionArgs)
                        .update(database, values);

        }
        return 0;
    }

    @Override
    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder){
        SQLiteDatabase database = userDatabase.getReadableDatabase();
        SelectionBuilder builder = new SelectionBuilder();
        Cursor cursor = null;
        switch (matcher.match(uri)){
            case USER_DIR:
                cursor = builder.table("user")
                        .where(selection, selectionArgs)
                        .query(database, projection, sortOrder);
                break;
            case USER_ITEM:
                String id = uri.getLastPathSegment();
                cursor = builder.table("user")
                        .where("_ID=?", id)
                        .where(selection, selectionArgs)
                        .query(database, projection, sortOrder);
                break;
        }
        return cursor;
    }

    @Override
    public String getType(Uri uri){
        //返回MIME
        switch(matcher.match(uri)){
            case USER_DIR:
                return "vnd.android.cursor.dir/vnd.blog.zero.com.contentproviderdemo.provider.user";
            case USER_ITEM:
                return "vnd.android.cursor.item/vnd.blog.zero.com.contentproviderdemo.provider.user";
        }
        return null;
    }
    //-------------------
}
