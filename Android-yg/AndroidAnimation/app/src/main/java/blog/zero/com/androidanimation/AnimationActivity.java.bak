package blog.zero.com.androidanimation;

import android.animation.AnimatorSet;
import android.animation.IntEvaluator;
import android.animation.ObjectAnimator;
import android.animation.ValueAnimator;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.ImageView;

import androidx.appcompat.app.AppCompatActivity;

public class AnimationActivity extends AppCompatActivity {
    static final String TAG = "AnimationActivity";
    ImageView alphaImage ;
    Animation loadAnimation;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_animation);

        alphaImage = findViewById(R.id.image);

//        startAlphaAnimation();
//        startAnimation(R.anim.anim_scale);
//        startAnimation(R.anim.anim_translate);
//        startAnimation(R.anim.anim_rotate);
//        objectAlphaAnimator();
//        animatorsetScale();
//        animatorsetTranslation();
//        animatorsetRotate();
        setHeightTo600();
    }

    private void startAnimation(int res){
        loadAnimation = AnimationUtils.loadAnimation(this, res);
        alphaImage.startAnimation(loadAnimation);
    }

    //利用 ObjectAnimator 实现透明度动画
    private void objectAlphaAnimator(){
        //利用ObjectAnimator实现透明度动画
        ObjectAnimator.ofFloat(alphaImage, "alpha", 1, 0, 1).setDuration(2000).start();
    }

    //利用AnimatorSet和ObjectAnimator实现缩放动画
    private void animatorsetScale(){
        //利用AnimatorSet和ObjectAnimator实现缩放动画
        final AnimatorSet animatorSet = new AnimatorSet();
        alphaImage.setPivotX(alphaImage.getWidth()/2);
        alphaImage.setPivotY(alphaImage.getHeight()/2);
        animatorSet.playTogether(ObjectAnimator.ofFloat(alphaImage, "scaleX", 1, 0).setDuration(5000), ObjectAnimator.ofFloat(alphaImage, "scaleY", 1, 0).setDuration(5000));
        animatorSet.start();
    }

    //利用AnimatorSet和ObjectAnimator实现平移动画
    private void animatorsetTranslation(){
        AnimatorSet animatorSet = new AnimatorSet();
        animatorSet.playTogether(ObjectAnimator.ofFloat(alphaImage, "translationX", 20, 100).setDuration(2000), ObjectAnimator.ofFloat(alphaImage, "translationY", 20, 100).setDuration(2000));
        animatorSet.start();
    }

    //利用ObjectAnimator实现旋转动画
    private void animatorsetRotate(){
        alphaImage.setPivotX(alphaImage.getWidth()/2);
        alphaImage.setPivotX(alphaImage.getHeight()/2);

        ObjectAnimator rotate =  ObjectAnimator.ofFloat(alphaImage, "rotation", 0, 360).setDuration(1000);
        rotate.setRepeatCount(1);
        rotate.start();
    }

    //使ImageView从当前高度变化到600，使用类包装器
    private void setHeightTo600(){
        ViewWrapper wrapper = new ViewWrapper(alphaImage);
//        ObjectAnimator.ofInt(wrapper, "height", 800).setDuration(5000).start();
        performAnimate(alphaImage, alphaImage.getWidth(), 500);
    }

    private void performAnimate(final View target, final int start, final int end) {
        ValueAnimator valueAnimator = ValueAnimator.ofInt(1, 100);
        valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            //持有一个IntEvaluator对象，方便下面估值的时候使用
            private IntEvaluator mEvaluator = new IntEvaluator();
            @Override
            public void onAnimationUpdate(ValueAnimator animator) {
                //获得当前动画的进度值，整型，1-100之间
                int currentValue = (Integer)animator.getAnimatedValue();
                Log.d(TAG, "current value: " + currentValue);
                //计算当前进度占整个动画过程的比例，浮点型，0-1之间
                float fraction = currentValue / 100f;
                //直接调用整型估值器通过比例计算出宽度，然后再设给Button
                target.getLayoutParams().width = mEvaluator.evaluate(fraction, start, end);
                target.requestLayout();
            }
        });
        valueAnimator.setDuration(5000).start();
    }


}
